"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import {
  User,
  Mail,
  Phone,
  MapPin,
  Calendar,
  Edit,
  Save,
  Camera,
  Shield,
  Bell,
  Key,
  Activity,
  Award,
  BookOpen,
} from "lucide-react"
import { useAuth } from "@/contexts/auth-context"

export function UserProfile() {
  const { user } = useAuth()
  const [isEditing, setIsEditing] = useState(false)
  const [profileData, setProfileData] = useState({
    name: user?.name || "",
    email: user?.email || "",
    phone: "+84 123 456 789",
    address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    bio: "Gi·∫£ng vi√™n ng√†nh C√¥ng ngh·ªá Th√¥ng tin v·ªõi 10 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y.",
    department: "Khoa h·ªçc M√°y t√≠nh",
    position: user?.role === "admin" ? "Qu·∫£n tr·ªã vi√™n H·ªá th·ªëng" : "Th√†nh vi√™n Gi·∫£ng vi√™n",
    joinDate: "2020-09-01",
  })

  const [notifications, setNotifications] = useState({
    emailNotifications: true,
    pushNotifications: false,
    weeklyReports: true,
    systemAlerts: true,
  })

  const handleSaveProfile = () => {
    alert("‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
    setIsEditing(false)
  }

  const handleChangePassword = () => {
    alert("üîë Email ƒë·ªïi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn " + user?.email)
  }

  const handleUploadAvatar = () => {
    alert("üì∑ Ch·ª©c nƒÉng upload ·∫£nh s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai sau!")
  }

  const handleNotificationChange = (key: string, value: boolean) => {
    setNotifications(prev => ({ ...prev, [key]: value }))
    alert(`üîî C√†i ƒë·∫∑t th√¥ng b√°o "${key}" ƒë√£ ƒë∆∞·ª£c ${value ? 'b·∫≠t' : 't·∫Øt'}`)
  }

  const handleDeleteAccount = () => {
    alert("‚ö†Ô∏è T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c x√≥a sau 30 ng√†y. Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i.")
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">H·ªì s∆° c√° nh√¢n</h1>
          <p className="text-slate-600">Qu·∫£n l√Ω th√¥ng tin v√† c√†i ƒë·∫∑t t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>
        <div className="flex gap-2">
          {isEditing ? (
            <>
              <Button variant="outline" onClick={() => setIsEditing(false)}>
                H·ªßy
              </Button>
              <Button onClick={handleSaveProfile}>
                <Save className="h-4 w-4 mr-2" />
                L∆∞u thay ƒë·ªïi
              </Button>
            </>
          ) : (
            <Button onClick={() => setIsEditing(true)}>
              <Edit className="h-4 w-4 mr-2" />
              Ch·ªânh s·ª≠a
            </Button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Profile Card */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="relative">
                  <Avatar className="h-24 w-24">
                    <AvatarImage src={user?.avatar || "/placeholder.svg"} />
                    <AvatarFallback className="text-2xl">
                      {user?.name?.split(" ").map(n => n[0]).join("").toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <Button
                    size="sm"
                    className="absolute -bottom-2 -right-2 rounded-full h-8 w-8 p-0"
                    onClick={handleUploadAvatar}
                  >
                    <Camera className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <CardTitle>{profileData.name}</CardTitle>
              <CardDescription>{profileData.position}</CardDescription>
              <Badge className="w-fit mx-auto mt-2">
                {user?.role === "admin" ? "Qu·∫£n tr·ªã vi√™n" : "Gi·∫£ng vi√™n"}
              </Badge>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-2 text-sm">
                <Mail className="h-4 w-4 text-slate-500" />
                <span>{profileData.email}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Phone className="h-4 w-4 text-slate-500" />
                <span>{profileData.phone}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <MapPin className="h-4 w-4 text-slate-500" />
                <span>{profileData.address}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Calendar className="h-4 w-4 text-slate-500" />
                <span>Tham gia t·ª´ {profileData.joinDate}</span>
              </div>
            </CardContent>
          </Card>

          {/* Quick Stats removed per requirement */}
        </div>

        {/* Main Content */}
        <div className="lg:col-span-2">
          <Tabs defaultValue="personal" className="space-y-4">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="personal">Th√¥ng tin</TabsTrigger>
              <TabsTrigger value="security">B·∫£o m·∫≠t</TabsTrigger>
              <TabsTrigger value="notifications">Th√¥ng b√°o</TabsTrigger>
              {/* <TabsTrigger value="achievements">Th√†nh t√≠ch</TabsTrigger> */}
            </TabsList>

            <TabsContent value="personal" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                  <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n c·ªßa b·∫°n</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">H·ªç v√† t√™n</Label>
                      <Input
                        id="name"
                        value={profileData.name}
                        onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        value={profileData.email}
                        onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                      <Input
                        id="phone"
                        value={profileData.phone}
                        onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}
                        disabled={!isEditing}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="department">Ng√†nh/Ph√≤ng ban</Label>
                      <Input
                        id="department"
                        value={profileData.department}
                        onChange={(e) => setProfileData(prev => ({ ...prev, department: e.target.value }))}
                        disabled={!isEditing}
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
                    <Input
                      id="address"
                      value={profileData.address}
                      onChange={(e) => setProfileData(prev => ({ ...prev, address: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="bio">Gi·ªõi thi·ªáu</Label>
                    <Textarea
                      id="bio"
                      value={profileData.bio}
                      onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}
                      disabled={!isEditing}
                      rows={3}
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="security" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5" />
                    B·∫£o m·∫≠t t√†i kho·∫£n
                  </CardTitle>
                  <CardDescription>Qu·∫£n l√Ω m·∫≠t kh·∫©u v√† c√†i ƒë·∫∑t b·∫£o m·∫≠t</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-medium">M·∫≠t kh·∫©u</h3>
                      <p className="text-sm text-slate-600">Thay ƒë·ªïi m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p</p>
                    </div>
                    <Button onClick={handleChangePassword}>
                      <Key className="h-4 w-4 mr-2" />
                      ƒê·ªïi m·∫≠t kh·∫©u
                    </Button>
                  </div>
                  
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-medium">X√°c th·ª±c 2 b∆∞·ªõc</h3>
                      <p className="text-sm text-slate-600">TƒÉng c∆∞·ªùng b·∫£o m·∫≠t v·ªõi 2FA</p>
                    </div>
                    <Button variant="outline" onClick={() => alert("üîê Ch·ª©c nƒÉng 2FA s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai sau!")}>
                      K√≠ch ho·∫°t
                    </Button>
                  </div>

                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-medium">Phi√™n ƒëƒÉng nh·∫≠p</h3>
                      <p className="text-sm text-slate-600">Qu·∫£n l√Ω c√°c thi·∫øt b·ªã ƒë√£ ƒëƒÉng nh·∫≠p</p>
                    </div>
                    <Button variant="outline" onClick={() => alert("üì± Hi·ªÉn th·ªã 3 thi·∫øt b·ªã ƒëang ho·∫°t ƒë·ªông")}>
                      Xem chi ti·∫øt
                    </Button>
                  </div>

                  <div className="pt-4 border-t">
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="destructive">
                          X√≥a t√†i kho·∫£n
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n?</AlertDialogTitle>
                          <AlertDialogDescription>
                            H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c. T·∫•t c·∫£ d·ªØ li·ªáu c·ªßa b·∫°n s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                          <AlertDialogAction onClick={handleDeleteAccount}>
                            X√≥a t√†i kho·∫£n
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="notifications" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bell className="h-5 w-5" />
                    C√†i ƒë·∫∑t th√¥ng b√°o
                  </CardTitle>
                  <CardDescription>T√πy ch·ªânh c√°c lo·∫°i th√¥ng b√°o b·∫°n mu·ªën nh·∫≠n</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-medium">Email th√¥ng b√°o</h3>
                      <p className="text-sm text-slate-600">Nh·∫≠n th√¥ng b√°o qua email</p>
                    </div>
                    <Switch
                      checked={notifications.emailNotifications}
                      onCheckedChange={(checked) => handleNotificationChange('emailNotifications', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-medium">Push notifications</h3>
                      <p className="text-sm text-slate-600">Th√¥ng b√°o ƒë·∫©y tr√™n tr√¨nh duy·ªát</p>
                    </div>
                    <Switch
                      checked={notifications.pushNotifications}
                      onCheckedChange={(checked) => handleNotificationChange('pushNotifications', checked)}
                    />
                  </div>


                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="achievements" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    Th√†nh t√≠ch & Huy hi·ªáu
                  </CardTitle>
                  <CardDescription>C√°c th√†nh t√≠ch b·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="flex items-center gap-3 p-3 border rounded-lg">
                      <div className="h-12 w-12 bg-yellow-100 rounded-full flex items-center justify-center">
                        <Award className="h-6 w-6 text-yellow-600" />
                      </div>
                      <div>
                        <h3 className="font-medium">Gi·∫£ng vi√™n xu·∫•t s·∫Øc</h3>
                        <p className="text-sm text-slate-600">ƒê·∫°t ƒë∆∞·ª£c th√°ng 12/2023</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-3 p-3 border rounded-lg">
                      <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <BookOpen className="h-6 w-6 text-blue-600" />
                      </div>
                      <div>
                        <h3 className="font-medium">Chuy√™n gia AI</h3>
                        <p className="text-sm text-slate-600">ƒê·∫°t ƒë∆∞·ª£c th√°ng 10/2023</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}
